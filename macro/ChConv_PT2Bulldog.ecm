unit PT2Bulldog ;
uses Reserved, Common ;

@local

const BS_MHz = 1049.48 ;
const BS_DltMHz = 38.36 ;
const ND_MHz = 1613.0 ;
const ND_DltMHz = 40.0 ;

function ConvertChannels(
    Space as str, Channels as use<ChRecord>[],
    DescribeService as int,
    WriteTSID as int, WriteMHz as int) as int
{
  dim Comment = AUTOGENERATED_COMMENT % Space ;
  for(dim i=0;i<GetLineCount();i++) {
    dim Line = Trim(GetLine(i)) ;
    if(countof(Line)>countof(Space))  {
      if(Line==Comment||SubStr(Line,0,countof(Space))==Space) {
        BeginUpdateEditor();
        while(i<GetLineCount()&&Trim(GetLine(i))!="")
          DeleteLine(i) ;
        foreach_reverse(dim Record : Channels) {
          dim ConvLine = Space+", " ;
          /*
          ConvLine += IntToStr(DescribeService?Record.ServiceID:0)+", " ;
          ConvLine += IntToStr(Record.PhyCh)+"," ;
          ConvLine += "0x"+IntToHex(Record.TSID,4)+"," ;
          ConvLine += Record.Ch ;
          */
          if(Space=="BS") {
            if(WriteMHz)
              ConvLine += "%4.2fMHz" % (BS_MHz+BS_DltMHz*flt((Record.PhyCh-1)/2)) ;
            else
              ConvLine += "BS"+IntToStr(Record.PhyCh);
          }else if(Space=="CS110") {
            if(WriteMHz)
              ConvLine += "%4.2fMHz" % (ND_MHz+ND_DltMHz*flt((Record.PhyCh-2)/2)) ;
            else
              ConvLine += "ND"+IntToStr(Record.PhyCh);
          }
          if(WriteTSID)
            ConvLine += "/ID0x"+IntToHex(Record.TSID,4);
          else if(Space!="CS110")
            ConvLine += "/TS"+IntToStr(Record.TSID&7);
          if(WriteTSID||WriteMHz) {
            ConvLine +="," ;
            ConvLine += Record.Ch ;
          }
          if(DescribeService&&Record.Name!="")
            ConvLine += " ;" + Record.Name ;
          if(!Record.ServiceID)
            ConvLine = ";"+ConvLine ;
          InsertLine(i,ConvLine) ;
        }
        InsertLine(i,Comment) ;
        EndUpdateEditor() ;
        return true ;
      }
    }
  }
  return false ;
}

function ConvertChFile(
  ChFile as str, WriteTSID as int, WriteMHz as int,
  BSChannels as use<ChRecord>[],
  NDChannels as use<ChRecord>[] ) as int
{
  dim Result = false ;
  dim FullFileName = ExpandEnvironmentText(ChFile) ;
  OutputMessage("Converting Bulldog ChFile `%s'..." % FullFileName) ;
  dim BulldogChTabIndex = TabOpenFile(FullFileName) ;
  if (BulldogChTabIndex>=0) {
    TabSetActiveIndex(BulldogChTabIndex);
    Result =
      ConvertChannels("BS",BSChannels,true,WriteTSID,WriteMHz) &&
      ConvertChannels("CS110",NDChannels,false,WriteTSID,WriteMHz) ;
  }
  OutputMessage("Bulldog ChFile `%s' converting %s."
    % FullFileName % (Result?"succeeded":"failed") ) ;
  return Result ;
}

@global

ENTRY : {
  MacroEntryCaption("PT -> Bulldog サテライトチャンネルファイル変換") ;
  return ;
}

function ConvertPT2Bulldog() as int {
  dim BSChannels as use<ChRecord>[] ;
  dim NDChannels as use<ChRecord>[] ;
  dim Result=false ;
  if(MakeBSChannels(BSChannels)&&MakeNDChannels(NDChannels)) do {
    if(!ConvertChFile(BULLDOG_CHFILE_TSID, true,  false, BSChannels, NDChannels)) break;
    if(!ConvertChFile(BULLDOG_CHFILE_MHZ,  false, true,  BSChannels, NDChannels)) break;
    if(!ConvertChFile(BULLDOG_CHFILE,      false, false, BSChannels, NDChannels)) break;
    Result=true;
  }while(0);
  return Result ;
}

ACTION : {
  ClearMessage() ;
  SetMessageHint("PT -> Bulldog") ;
  dim Result = ConvertPT2Bulldog();
  OutputMessage("PT -> Bulldog "+(Result?"completed.":"failed.")) ;
  HistoryMessage() ;
  return ;
}

