unit Common ;

uses Reserved ;

@global

// IN: PT-1/2 サテライトのチャンネルファイル(PT1-PT2-Sample-200改でスキャンしたもの)
const PT_S_CHFILE = R"^(\\HESTIA\BonDriver\BonDriver_PT-S.ChSet.txt)^" ;
// IN: サテライト情報が入っているTVTestのスキャン済チャンネルファイル(サテライト情報が入っていればなんでも可)
const PT_S_CH2FILE = R"^(C:\Software Files\Application\TV\Bon\TVTest\BonDriver\BonDriver_RDCT_Spinel_PT-TS.ch2)^" ;
// OUT: AKB-PCR-20X のチャンネルファイル
const BULLDOG_CHFILE = R"^(%FILETAG:BULLDOG_CHFILE_TSID%)^" ;
// OUT: UNIDEN DT-300 のチャンネルファイル
const DT300_CHFILE = R"^(%FILETAG:DT300_CHFILE%)^" ;

const AUTOGENERATED_COMMENT = "; -*- auto generated %s channels -*-" ;

function Separate(Line as str, Delimiter as chr, Elements as str &[]) as int
{
  countof(Elements)=0 ;
  dim opos=0 ;
  dim pos as int ;
  while((pos=StrScan(SubStr(Line,opos,countof(Line)-opos),Delimiter))>=0) {
    pos += opos ;
    pushto(Elements,SubStr(Line,opos,pos-opos)) ;
    opos=pos+1 ;
  }
  if(opos>0||countof(Line)>0)
    pushto(Elements,SubStr(Line,opos,countof(Line)-opos));
  return countof(Elements) ;
}

function MakeChannels(Space as str, Channels as use<ChRecord>&[]) as int
{
  OutputMessage("loading PT-S's TVTest ch2...") ;
  dim PTCh2TabIndex = TabOpenFile(ExpandEnvironmentText(PT_S_CH2FILE)) ;
  if (PTCh2TabIndex<0) return false ;
  TabSetActiveIndex(PTCh2TabIndex);
  dim TVChannels as use<ChRecord>[] ;
  for(dim i=0;i<GetLineCount();i++) {
    dim Line = GetLine(i) ;
    if(countof(Line)>0&&Line[0]!=';') {
      dim Elements as str[] ;
      if(Separate(Line,',',Elements)==9) {
        dim Record as use<ChRecord> ;
        Record.Name = Elements[0] ;
        Record.TSID = StrToInt(Elements[7]) ;
        Record.ServiceID = StrToInt(Elements[5]) ;
        pushto(TVChannels,Record);
      }
    }
  }
  OutputMessage("making indexed TSID map...") ;
  dim TVTSIDIndexMap as use< Map<int,int> > ;
  foreach(dim i, Record : TVChannels) {
    TVTSIDIndexMap.Insert(Record.TSID, i) ;
  }
  OutputMessage("loading PT-S chSet...") ;
  dim PTChTabIndex = TabOpenFile(ExpandEnvironmentText(PT_S_CHFILE)) ;
  if (PTChTabIndex<0) return false ;
  TabSetActiveIndex(PTChTabIndex) ;
  for(dim i=0;i<GetLineCount();i++) {
    dim Line = GetLine(i) ;
    if( countof(Line)>countof(Space)&&
        SubStr(Line,0,countof(Space))==Space ) {
      dim Elements as str[] ;
      if(Separate(Line,'\t',Elements)==5) {
        dim Record as use<ChRecord> ;
        Record.Space = Space ;
        dim SerialCh = StrToInt(Elements[3]) ;
        if(SerialCh<12)
          Record.PhyCh = SerialCh *2+1 ;
        else
          Record.PhyCh = (SerialCh-12) *2+2 ;
        Record.TSID = StrToInt(Elements[4]) ;
        Record.Ch = Elements[0] ;
        if(TVTSIDIndexMap.Find(Record.TSID)) {
          dim Index = TVTSIDIndexMap.Items[Record.TSID] ;
          Record.ServiceID = TVChannels[Index].ServiceID ;
          Record.Name = TVChannels[Index].Name ;
        }else {
          Record.ServiceID = 0 ;
          Record.Name = "" ;
        }
        pushto(Channels,Record);
      }
    }
  }
  return true ;
}

  // for BS
function MakeBSChannels(BSChannels as use<ChRecord>&[]) as int
{
  return MakeChannels("BS",BSChannels) ;
}
  // for CS110
function MakeNDChannels(NDChannels as use<ChRecord>&[]) as int
{
  return MakeChannels("ND",NDChannels) ;
}

