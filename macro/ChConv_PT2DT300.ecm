unit PT2DT300 ;
uses Reserved, Common ;

@local

function ConvertChannels(
    Space as str, Channels as use<ChRecord>[],
    RemoconPrefix as str) as int
{
  dim Comment = AUTOGENERATED_COMMENT % Space ;
  for(dim i=0;i<GetLineCount();i++) {
    dim Line = Trim(GetLine(i)) ;
    if(countof(Line)>countof(Space))  {
      if(Line==Comment||SubStr(Line,0,countof(Space))==Space) {
        BeginUpdateEditor();
        while(i<GetLineCount()&&Trim(GetLine(i))!="")
          DeleteLine(i) ;
        foreach_reverse(dim Record : Channels) {
          dim ConvLine = Space+",\t\t" ;
          ConvLine += Record.Ch+",\t\t" ;
          dim RemoconSuffix = IntToStr(Record.ServiceID) ;
          while(countof(RemoconSuffix)<3)
            RemoconSuffix = "0"+RemoconSuffix ;
          ConvLine += RemoconPrefix+ RemoconSuffix ;
          if(Record.Name!="")
            ConvLine += " ; " + Record.Name ;
          if(!Record.ServiceID)
            ConvLine = ";"+ConvLine ;
          InsertLine(i,ConvLine) ;
        }
        InsertLine(i,Comment) ;
        EndUpdateEditor();
        return true ;
      }
    }
  }
  return false ;
}


@global

ENTRY : {
  MacroEntryCaption("PT -> DT300 サテライトチャンネルファイル変換") ;
  return ;
}

function ConvertPT2DT300() as int {
  dim BSChannels as use<ChRecord>[] ;
  dim NDChannels as use<ChRecord>[] ;
  dim Result=false ;
  if(MakeBSChannels(BSChannels)&&MakeNDChannels(NDChannels)) {
    OutputMessage("loading DT300 ch...") ;
    dim DT300ChTabIndex = TabOpenFile(ExpandEnvironmentText(DT300_CHFILE)) ;
    if (DT300ChTabIndex>=0) {
      TabSetActiveIndex(DT300ChTabIndex);
      Result =
        ConvertChannels("BS",BSChannels,"YD") &&
        ConvertChannels("110CS",NDChannels,"ZD") ;
    }
  }
  return Result ;
}

ACTION : {
  ClearMessage() ;
  SetMessageHint("PT -> DT300") ;
  dim Result = ConvertPT2DT300();
  OutputMessage("PT -> DT300 "+(Result?"completed.":"failed.")) ;
  HistoryMessage() ;
  return ;
}

